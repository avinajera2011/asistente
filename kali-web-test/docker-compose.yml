services:
  nginx:
    build: ./nginx
    container_name: devsecops_nginx
    ports:
      - "80:80"
    restart: unless-stopped
    depends_on:
      - dvwa
      - juice-shop
      - webgoat
      # - zap
      - kali
      - sonarqube

  dvwa:
    image: vulnerables/web-dvwa
    container_name: dvwa_target
    expose:
      - "80"
    restart: unless-stopped
    environment:
      - PHP_SELF=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/login.php"]
      interval: 10s
      timeout: 5s
      retries: 5

  juice-shop:
    image: bkimminich/juice-shop
    container_name: juiceshop_target
    expose:
      - "3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  webgoat:
    image: webgoat/webgoat:latest
    container_name: webgoat_target
    expose:
      - "8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/WebGoat/"]
      interval: 10s
      timeout: 5s
      retries: 5

  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    container_name: zap_scanner
    expose:
      - "8080"
    command: >
      zap.sh -daemon -port 8080 -host 0.0.0.0
      -config api.addrs.addr.name=.*
      -config api.addrs.addr.regex=true
      -config api.disablekey=true 
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    volumes:
      - ./data/zap-reports:/zap-reports
    healthcheck:
      # Se dirige a un endpoint específico de la API para una verificación más fiable.
      test: ["CMD", "curl", "-f", "http://localhost:8080/JSON/core/view/version"]
      # Aumentamos el intervalo y los reintentos para dar tiempo a ZAP.
      interval: 15s
      timeout: 10s
      retries: 10
      # MUY IMPORTANTE: Da a ZAP 60 segundos para arrancar antes de que los fallos
      # del healthcheck se consideren. Esto es crucial para aplicaciones pesadas.
      start_period: 60s

  scanner:
    build: ./kali
    container_name: zap_automation
    volumes:
      - ./scripts:/scripts
      - ./data/zap-reports:/zap-reports
    depends_on:
      zap:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    # COMANDO SIMPLIFICADO: Ya no necesita instalar nada, solo ejecutar el script
    # command: python3 /zap-scan.py
    restart: on-failure

  metasploit:
    image: metasploitframework/metasploit-framework
    container_name: metasploit_console
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=msf
      - POSTGRES_PASSWORD=msfpass
      - POSTGRES_DB=msfdb
    stdin_open: true
    tty: true
    restart: unless-stopped
    # command: msfconsole

  postgres_db:
    image: postgres:15
    container_name: shared_postgres
    environment:
      # Definimos el superusuario y la contraseña que el contenedor creará por defecto
      - POSTGRES_USER=msf
      - POSTGRES_PASSWORD=msfpass
      # ELIMINAMOS POSTGRES_DB PARA EVITAR LA CREACIÓN AUTOMÁTICA Y CONFLICTOS
      # - POSTGRES_DB=msfdb 
      
      # Variables que nuestro script usará
      - SONAR_DB_USER=sonar
      - SONAR_DB_PASSWORD=sonarpass
      - SONAR_DB_NAME=sonardb
    volumes:
      - pgdata:/var/lib/postgresql/data
      # Usaremos un único script que lo configure todo
      - ./scripts/init-all-dbs.sh:/docker-entrypoint-initdb.d/init-all-dbs.sh
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U msf"]
      interval: 10s
      timeout: 5s
      retries: 5

  kali:
    build: ./kali
    container_name: kali_terminal
    expose:
      - "7681"
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    volumes:
      - ./kali/data:/home/kali
      - ./scripts:/scripts:ro
    command: tail -f /dev/null

  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube_server
    expose:
      - "9000"
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres_db:5432/sonardb
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonarpass
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonar_scanner_cli
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      # RECUERDA GENERAR Y PEGAR TU TOKEN DE ACCESO DE SONARQUBE AQUÍ
      - SONAR_LOGIN=sqp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    volumes:
      - ./sample-code-to-scan:/usr/src

volumes:
  pgdata:
  msfdata:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: